# optimazation
def risk_parity(sigma,cov):

    n = len(cov)
    def func(w):
        # w is the weight
        # cov is the covariance matrix
        par = []
        n = len(w)
        num = np.dot(cov, w)
        den = np.sqrt(np.dot(np.dot(w.T,cov),w))
        for i in range(n):
            par += [(w[i]-den**2/(num[i]*n))**2]
        return sum(par)

    def const1(w):
        # sigma the std of the portfolio
        return np.sqrt(np.dot(np.dot(w.T,cov),w))-sigma

    def const2(w):
        # the sum of weight equal to one
        return sum(w)-1

    x0=np.ones(n)
    res = opt.minimize(func, x0, method='SLSQP',constraints=({'type': 'eq', 'fun': const1},{'type': 'eq', 'fun': const2}))
    return res.x

def mean_variance(r,r_goal,cov):
    #r is the return of each etfs
    #r_goal is the goal return in the constraint
    #cov is the covariance matrix of each etfs
    n = len(cov)
    def func(w):
        # w is the weight
        # cov is the covariance matrix
        return np.sqrt(np.dot(np.dot(w.T,cov),w))

    def const1(w):
        # sigma the std of the portfolio
        return np.dot(r.T,w)-r_goal

    def const2(w):
        # the sum of weight equal to one
        return sum(w)-1

    x0=np.ones(n)
    res = opt.minimize(func, x0, method='SLSQP',constraints=({'type': 'eq', 'fun': const1},{'type': 'eq', 'fun': const2}))
    return res.x

def equal_weight(r):
    #r is the return of each etfs
    n = len(r)
    res = np.ones(n)*1/n
    return res

def maximum_sr(r,cov):
    #r is the return of each etfs
    # cov is the covariance matrix
    # rf is the risk free rate
    n = len(cov)
    def func(w):
        # w is the weight
        # cov is the covariance matrix
        n = len(w)
        return -np.dot(r.T,w)/np.sqrt(np.dot(np.dot(w.T, cov), w))

    def const1(w):
        # the sum of weight equal to one
        return sum(w) - 1

    x0 = np.ones(n)
    res = opt.minimize(func, x0, method='SLSQP',
                       constraints=({'type': 'eq', 'fun': const1}))
    return res.x

def port_40_60():
    #we set the weight of 40 60 portfolio here
    weight = []
    return weight
